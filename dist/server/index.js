'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

require('source-map-support/register');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _slugify = require('slugify');

var _slugify2 = _interopRequireDefault(_slugify);

var _serveStatic = require('serve-static');

var _serveStatic2 = _interopRequireDefault(_serveStatic);

var _server = require('soundworks/server');

var soundworks = _interopRequireWildcard(_server);

var _PlayerExperience = require('./PlayerExperience');

var _PlayerExperience2 = _interopRequireDefault(_PlayerExperience);

var _SoundCheck = require('./services/SoundCheck');

var _SoundCheck2 = _interopRequireDefault(_SoundCheck);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// enable sourcemaps in node
var configName = process.env.ENV || 'default';
var configPath = _path2.default.join(__dirname, 'config', configName);
var config = null;
var projectConfig = null;

// rely on node `require` for synchronicity
try {
  config = require(configPath).default;
} catch (err) {
  console.error('Invalid ENV "' + configName + '", file "' + configPath + '.js" not found');
  console.error(err);
  process.exit(1);
}

// get app config
var projectName = config.projectName;

if (!projectName) throw new Error('Invalid project name, please define the `projectName` in `src/server/shared/config`');

var projectConfigPath = _path2.default.join(process.cwd(), 'projects', projectName, 'config.js');

try {
  projectConfig = require(projectConfigPath);
} catch (err) {
  console.error('Invalid project config file "' + projectConfigPath + '"');
  console.error(err);
  process.exit(1);
}

// configure express environment ('production' enables cache systems)
process.env.NODE_ENV = config.env;
// initialize application with configuration options
soundworks.server.init(config);

projectConfig.name = projectName;
// open static middleware for assets
var projectConfigJson = (0, _stringify2.default)(projectConfig);
var projectAssets = _path2.default.join(process.cwd(), 'projects', projectName, 'assets');

soundworks.server.router.use('/assets', (0, _serveStatic2.default)(projectAssets));
soundworks.server.router.get('/project-config', function (req, res) {
  return res.json(projectConfigJson);
});

// define the configuration object to be passed to the `.ejs` template
soundworks.server.setClientConfigDefinition(function (clientType, config, httpRequest) {
  return {
    clientType: clientType,
    env: config.env,
    appName: config.appName,
    websockets: config.websockets,
    version: config.version,
    defaultType: config.defaultClient,
    assetsDomain: config.assetsDomain
  };
});

// parse all states to create controllers
var sharedParams = soundworks.server.require('shared-params');

sharedParams.addBoolean('debug-mode', 'Debug mode', false);

projectConfig.states.forEach(function (state) {
  var name = (0, _slugify2.default)(state.title);
  var label = state.title;
  var options = state.events.map(function (event, index) {
    return '[' + index + '] - ' + event.type + ' (' + event.time + 's)';
  });

  sharedParams.addEnum(name, label, options);
});

// launch experiences
var experience = new _PlayerExperience2.default('player', projectConfig, projectName);

if (config.env !== 'production') {
  var controller = new soundworks.ControllerExperience('controller');
}

// start application
soundworks.server.start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInNvdW5kd29ya3MiLCJjb25maWdOYW1lIiwicHJvY2VzcyIsImVudiIsIkVOViIsImNvbmZpZ1BhdGgiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImNvbmZpZyIsInByb2plY3RDb25maWciLCJyZXF1aXJlIiwiZGVmYXVsdCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImV4aXQiLCJwcm9qZWN0TmFtZSIsIkVycm9yIiwicHJvamVjdENvbmZpZ1BhdGgiLCJjd2QiLCJOT0RFX0VOViIsInNlcnZlciIsImluaXQiLCJuYW1lIiwicHJvamVjdENvbmZpZ0pzb24iLCJwcm9qZWN0QXNzZXRzIiwicm91dGVyIiwidXNlIiwiZ2V0IiwicmVxIiwicmVzIiwianNvbiIsInNldENsaWVudENvbmZpZ0RlZmluaXRpb24iLCJjbGllbnRUeXBlIiwiaHR0cFJlcXVlc3QiLCJhcHBOYW1lIiwid2Vic29ja2V0cyIsInZlcnNpb24iLCJkZWZhdWx0VHlwZSIsImRlZmF1bHRDbGllbnQiLCJhc3NldHNEb21haW4iLCJzaGFyZWRQYXJhbXMiLCJhZGRCb29sZWFuIiwic3RhdGVzIiwiZm9yRWFjaCIsInN0YXRlIiwidGl0bGUiLCJsYWJlbCIsIm9wdGlvbnMiLCJldmVudHMiLCJtYXAiLCJldmVudCIsImluZGV4IiwidHlwZSIsInRpbWUiLCJhZGRFbnVtIiwiZXhwZXJpZW5jZSIsIlBsYXllckV4cGVyaWVuY2UiLCJjb250cm9sbGVyIiwiQ29udHJvbGxlckV4cGVyaWVuY2UiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0lBQVlBLFU7O0FBQ1o7Ozs7QUFDQTs7Ozs7Ozs7QUFOc0M7QUFRdEMsSUFBTUMsYUFBYUMsUUFBUUMsR0FBUixDQUFZQyxHQUFaLElBQW1CLFNBQXRDO0FBQ0EsSUFBTUMsYUFBYUMsZUFBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFB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QUFyQixFQUEyQndCLEtBQTNCLEVBQWtDQyxPQUFsQztBQUNELENBUkQ7O0FBVUE7QUFDQSxJQUFNUSxhQUFhLElBQUlDLDBCQUFKLENBQXFCLFFBQXJCLEVBQStCaEQsYUFBL0IsRUFBOENPLFdBQTlDLENBQW5COztBQUVBLElBQUlSLE9BQU9OLEdBQVAsS0FBZSxZQUFuQixFQUFpQztBQUMvQixNQUFNd0QsYUFBYSxJQUFJM0QsV0FBVzRELG9CQUFmLENBQW9DLFlBQXBDLENBQW5CO0FBQ0Q7O0FBRUQ7QUFDQTVELFdBQVdzQixNQUFYLENBQWtCdUMsS0FBbEIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7IC8vIGVuYWJsZSBzb3VyY2VtYXBzIGluIG5vZGVcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHNsdWdpZnkgZnJvbSAnc2x1Z2lmeSc7XG5pbXBvcnQgc2VydmVTdGF0aWMgZnJvbSAnc2VydmUtc3RhdGljJztcbmltcG9ydCAqIGFzIHNvdW5kd29ya3MgZnJvbSAnc291bmR3b3Jrcy9zZXJ2ZXInO1xuaW1wb3J0IFBsYXllckV4cGVyaWVuY2UgZnJvbSAnLi9QbGF5ZXJFeHBlcmllbmNlJztcbmltcG9ydCBTb3VuZENoZWNrIGZyb20gJy4vc2VydmljZXMvU291bmRDaGVjayc7XG5cbmNvbnN0IGNvbmZpZ05hbWUgPSBwcm9jZXNzLmVudi5FTlYgfHzCoCdkZWZhdWx0JztcbmNvbnN0IGNvbmZpZ1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnY29uZmlnJywgY29uZmlnTmFtZSk7XG5sZXQgY29uZmlnID0gbnVsbDtcbmxldCBwcm9qZWN0Q29uZmlnID0gbnVsbDtcblxuLy8gcmVseSBvbiBub2RlIGByZXF1aXJlYCBmb3Igc3luY2hyb25pY2l0eVxudHJ5IHtcbiAgY29uZmlnID0gcmVxdWlyZShjb25maWdQYXRoKS5kZWZhdWx0O1xufSBjYXRjaChlcnIpIHtcbiAgY29uc29sZS5lcnJvcihgSW52YWxpZCBFTlYgXCIke2NvbmZpZ05hbWV9XCIsIGZpbGUgXCIke2NvbmZpZ1BhdGh9LmpzXCIgbm90IGZvdW5kYCk7XG4gIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG4vLyBnZXQgYXBwIGNvbmZpZ1xuY29uc3QgcHJvamVjdE5hbWUgPSBjb25maWcucHJvamVjdE5hbWU7XG5cbmlmICghcHJvamVjdE5hbWUpXG4gIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwcm9qZWN0IG5hbWUsIHBsZWFzZSBkZWZpbmUgdGhlIGBwcm9qZWN0TmFtZWAgaW4gYHNyYy9zZXJ2ZXIvc2hhcmVkL2NvbmZpZ2AnKTtcblxuY29uc3QgcHJvamVjdENvbmZpZ1BhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3Byb2plY3RzJywgcHJvamVjdE5hbWUsICdjb25maWcuanMnKTtcblxudHJ5IHtcbiAgcHJvamVjdENvbmZpZyA9IHJlcXVpcmUocHJvamVjdENvbmZpZ1BhdGgpO1xufSBjYXRjaChlcnIpIHtcbiAgY29uc29sZS5lcnJvcihgSW52YWxpZCBwcm9qZWN0IGNvbmZpZyBmaWxlIFwiJHtwcm9qZWN0Q29uZmlnUGF0aH1cImApO1xuICBjb25zb2xlLmVycm9yKGVycik7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuLy8gY29uZmlndXJlIGV4cHJlc3MgZW52aXJvbm1lbnQgKCdwcm9kdWN0aW9uJyBlbmFibGVzIGNhY2hlIHN5c3RlbXMpXG5wcm9jZXNzLmVudi5OT0RFX0VOViA9IGNvbmZpZy5lbnY7XG4vLyBpbml0aWFsaXplIGFwcGxpY2F0aW9uIHdpdGggY29uZmlndXJhdGlvbiBvcHRpb25zXG5zb3VuZHdvcmtzLnNlcnZlci5pbml0KGNvbmZpZyk7XG5cblxucHJvamVjdENvbmZpZy5uYW1lID0gcHJvamVjdE5hbWU7XG4vLyBvcGVuIHN0YXRpYyBtaWRkbGV3YXJlIGZvciBhc3NldHNcbmNvbnN0IHByb2plY3RDb25maWdKc29uID0gSlNPTi5zdHJpbmdpZnkocHJvamVjdENvbmZpZyk7XG5jb25zdCBwcm9qZWN0QXNzZXRzID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdwcm9qZWN0cycsIHByb2plY3ROYW1lLCAnYXNzZXRzJyk7XG5cbnNvdW5kd29ya3Muc2VydmVyLnJvdXRlci51c2UoJy9hc3NldHMnLCBzZXJ2ZVN0YXRpYyhwcm9qZWN0QXNzZXRzKSk7XG5zb3VuZHdvcmtzLnNlcnZlci5yb3V0ZXIuZ2V0KCcvcHJvamVjdC1jb25maWcnLCAocmVxLCByZXMpID0+IHJlcy5qc29uKHByb2plY3RDb25maWdKc29uKSk7XG5cbi8vIGRlZmluZSB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gYmUgcGFzc2VkIHRvIHRoZSBgLmVqc2AgdGVtcGxhdGVcbnNvdW5kd29ya3Muc2VydmVyLnNldENsaWVudENvbmZpZ0RlZmluaXRpb24oKGNsaWVudFR5cGUsIGNvbmZpZywgaHR0cFJlcXVlc3QpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBjbGllbnRUeXBlOiBjbGllbnRUeXBlLFxuICAgIGVudjogY29uZmlnLmVudixcbiAgICBhcHBOYW1lOiBjb25maWcuYXBwTmFtZSxcbiAgICB3ZWJzb2NrZXRzOiBjb25maWcud2Vic29ja2V0cyxcbiAgICB2ZXJzaW9uOiBjb25maWcudmVyc2lvbixcbiAgICBkZWZhdWx0VHlwZTogY29uZmlnLmRlZmF1bHRDbGllbnQsXG4gICAgYXNzZXRzRG9tYWluOiBjb25maWcuYXNzZXRzRG9tYWluLFxuICB9O1xufSk7XG5cbi8vIHBhcnNlIGFsbCBzdGF0ZXMgdG8gY3JlYXRlIGNvbnRyb2xsZXJzXG5jb25zdCBzaGFyZWRQYXJhbXMgPSBzb3VuZHdvcmtzLnNlcnZlci5yZXF1aXJlKCdzaGFyZWQtcGFyYW1zJyk7XG5cbnNoYXJlZFBhcmFtcy5hZGRCb29sZWFuKCdkZWJ1Zy1tb2RlJywgJ0RlYnVnIG1vZGUnLCBmYWxzZSk7XG5cbnByb2plY3RDb25maWcuc3RhdGVzLmZvckVhY2goc3RhdGUgPT4ge1xuICBjb25zdCBuYW1lID0gc2x1Z2lmeShzdGF0ZS50aXRsZSk7XG4gIGNvbnN0IGxhYmVsID0gc3RhdGUudGl0bGU7XG4gIGNvbnN0IG9wdGlvbnMgPSBzdGF0ZS5ldmVudHMubWFwKChldmVudCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gYFske2luZGV4fV0gLSAke2V2ZW50LnR5cGV9ICgke2V2ZW50LnRpbWV9cylgO1xuICB9KTtcblxuICBzaGFyZWRQYXJhbXMuYWRkRW51bShuYW1lLCBsYWJlbCwgb3B0aW9ucyk7XG59KTtcblxuLy8gbGF1bmNoIGV4cGVyaWVuY2VzXG5jb25zdCBleHBlcmllbmNlID0gbmV3IFBsYXllckV4cGVyaWVuY2UoJ3BsYXllcicsIHByb2plY3RDb25maWcsIHByb2plY3ROYW1lKTtcblxuaWYgKGNvbmZpZy5lbnYgIT09ICdwcm9kdWN0aW9uJykge1xuICBjb25zdCBjb250cm9sbGVyID0gbmV3IHNvdW5kd29ya3MuQ29udHJvbGxlckV4cGVyaWVuY2UoJ2NvbnRyb2xsZXInKTtcbn1cblxuLy8gc3RhcnQgYXBwbGljYXRpb25cbnNvdW5kd29ya3Muc2VydmVyLnN0YXJ0KCk7XG4iXX0=