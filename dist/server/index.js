'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

require('source-map-support/register');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _slugify = require('slugify');

var _slugify2 = _interopRequireDefault(_slugify);

var _serveStatic = require('serve-static');

var _serveStatic2 = _interopRequireDefault(_serveStatic);

var _server = require('soundworks/server');

var soundworks = _interopRequireWildcard(_server);

var _PlayerExperience = require('./PlayerExperience');

var _PlayerExperience2 = _interopRequireDefault(_PlayerExperience);

var _SoundCheck = require('./services/SoundCheck');

var _SoundCheck2 = _interopRequireDefault(_SoundCheck);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// enable sourcemaps in node
var configName = process.env.ENV || 'default';
var configPath = _path2.default.join(__dirname, 'config', configName);
var config = null;
var projectConfig = null;

// rely on node `require` for synchronicity
try {
    config = require(configPath).default;
} catch (err) {
    console.error('Invalid ENV "' + configName + '", file "' + configPath + '.js" not found');
    console.error(err);
    process.exit(1);
}

// get app config
var projectName = config.projectName;

if (!projectName) throw new Error('Invalid project name, please define the `projectName` in `src/server/shared/config`');

var projectConfigPath = _path2.default.join(process.cwd(), 'projects', projectName, 'config.js');

try {
    projectConfig = require(projectConfigPath);
} catch (err) {
    console.error('Invalid project config file "' + projectConfigPath + '"');
    console.error(err);
    process.exit(1);
}

// configure express environment ('production' enables cache systems)
process.env.NODE_ENV = config.env;
// initialize application with configuration options
soundworks.server.init(config);

projectConfig.name = projectName;
// open static middleware for assets
var projectConfigJson = (0, _stringify2.default)(projectConfig);
var projectAssets = _path2.default.join(process.cwd(), 'projects', projectName, 'assets');

soundworks.server.router.use('/assets', (0, _serveStatic2.default)(projectAssets));
soundworks.server.router.get('/project-config', function (req, res) {
    return res.json(projectConfigJson);
});

// define the configuration object to be passed to the `.ejs` template
soundworks.server.setClientConfigDefinition(function (clientType, config, httpRequest) {
    return {
        clientType: clientType,
        env: config.env,
        appName: config.appName,
        websockets: config.websockets,
        version: config.version,
        defaultType: config.defaultClient,
        assetsDomain: config.assetsDomain
    };
});

// parse all states to create controllers
var sharedParams = soundworks.server.require('shared-params');

sharedParams.addBoolean('debug-mode', 'Debug mode', false);

projectConfig.states.forEach(function (state) {
    var name = (0, _slugify2.default)(state.title);
    var label = state.title;
    var options = state.events.map(function (event, index) {
        return '[' + index + '] - ' + event.type + ' (' + event.time + 's)';
    });

    sharedParams.addEnum(name, label, options);
});

// launch experiences
var experience = new _PlayerExperience2.default('player', projectConfig, projectName);

if (config.env !== 'production') {
    var controller = new soundworks.ControllerExperience('controller');
}

// start application
soundworks.server.start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInNvdW5kd29ya3MiLCJjb25maWdOYW1lIiwicHJvY2VzcyIsImVudiIsIkVOViIsImNvbmZpZ1BhdGgiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImNvbmZpZyIsInByb2plY3RDb25maWciLCJyZXF1aXJlIiwiZGVmYXVsdCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImV4aXQiLCJwcm9qZWN0TmFtZSIsIkVycm9yIiwicHJvamVjdENvbmZpZ1BhdGgiLCJjd2QiLCJOT0RFX0VOViIsInNlcnZlciIsImluaXQiLCJuYW1lIiwicHJvamVjdENvbmZpZ0pzb24iLCJwcm9qZWN0QXNzZXRzIiwicm91dGVyIiwidXNlIiwiZ2V0IiwicmVxIiwicmVzIiwianNvbiIsInNldENsaWVudENvbmZpZ0RlZmluaXRpb24iLCJjbGllbnRUeXBlIiwiaHR0cFJlcXVlc3QiLCJhcHBOYW1lIiwid2Vic29ja2V0cyIsInZlcnNpb24iLCJkZWZhdWx0VHlwZSIsImRlZmF1bHRDbGllbnQiLCJhc3NldHNEb21haW4iLCJzaGFyZWRQYXJhbXMiLCJhZGRCb29sZWFuIiwic3RhdGVzIiwiZm9yRWFjaCIsInN0YXRlIiwidGl0bGUiLCJsYWJlbCIsIm9wdGlvbnMiLCJldmVudHMiLCJtYXAiLCJldmVudCIsImluZGV4IiwidHlwZSIsInRpbWUiLCJhZGRFbnVtIiwiZXhwZXJpZW5jZSIsIlBsYXllckV4cGVyaWVuY2UiLCJjb250cm9sbGVyIiwiQ29udHJvbGxlckV4cGVyaWVuY2UiLCJzdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0lBQVlBLFU7O0FBQ1o7Ozs7QUFDQTs7Ozs7Ozs7QUFOc0M7QUFRdEMsSUFBTUMsYUFBYUMsUUFBUUMsR0FBUixDQUFZQyxHQUFaLElBQW9CLFNBQXZDO0FBQ0EsSUFBTUMsYUFBYUMsZUFBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFB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QmhDLElBQXJCLEVBQTJCd0IsS0FBM0IsRUFBa0NDLE9BQWxDO0FBQ0gsQ0FSRDs7QUFVQTtBQUNBLElBQU1RLGFBQWEsSUFBSUMsMEJBQUosQ0FBcUIsUUFBckIsRUFBK0JoRCxhQUEvQixFQUE4Q08sV0FBOUMsQ0FBbkI7O0FBRUEsSUFBSVIsT0FBT04sR0FBUCxLQUFlLFlBQW5CLEVBQWlDO0FBQzdCLFFBQU13RCxhQUFhLElBQUkzRCxXQUFXNEQsb0JBQWYsQ0FBb0MsWUFBcEMsQ0FBbkI7QUFDSDs7QUFFRDtBQUNBNUQsV0FBV3NCLE1BQVgsQ0FBa0J1QyxLQUFsQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJzsgLy8gZW5hYmxlIHNvdXJjZW1hcHMgaW4gbm9kZVxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgc2x1Z2lmeSBmcm9tICdzbHVnaWZ5JztcbmltcG9ydCBzZXJ2ZVN0YXRpYyBmcm9tICdzZXJ2ZS1zdGF0aWMnO1xuaW1wb3J0ICogYXMgc291bmR3b3JrcyBmcm9tICdzb3VuZHdvcmtzL3NlcnZlcic7XG5pbXBvcnQgUGxheWVyRXhwZXJpZW5jZSBmcm9tICcuL1BsYXllckV4cGVyaWVuY2UnO1xuaW1wb3J0IFNvdW5kQ2hlY2sgZnJvbSAnLi9zZXJ2aWNlcy9Tb3VuZENoZWNrJztcblxuY29uc3QgY29uZmlnTmFtZSA9IHByb2Nlc3MuZW52LkVOViB8fCDCoCdkZWZhdWx0JztcbmNvbnN0IGNvbmZpZ1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnY29uZmlnJywgY29uZmlnTmFtZSk7XG5sZXQgY29uZmlnID0gbnVsbDtcbmxldCBwcm9qZWN0Q29uZmlnID0gbnVsbDtcblxuLy8gcmVseSBvbiBub2RlIGByZXF1aXJlYCBmb3Igc3luY2hyb25pY2l0eVxudHJ5IHtcbiAgICBjb25maWcgPSByZXF1aXJlKGNvbmZpZ1BhdGgpLmRlZmF1bHQ7XG59IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGBJbnZhbGlkIEVOViBcIiR7Y29uZmlnTmFtZX1cIiwgZmlsZSBcIiR7Y29uZmlnUGF0aH0uanNcIiBub3QgZm91bmRgKTtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG4vLyBnZXQgYXBwIGNvbmZpZ1xuY29uc3QgcHJvamVjdE5hbWUgPSBjb25maWcucHJvamVjdE5hbWU7XG5cbmlmICghcHJvamVjdE5hbWUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHByb2plY3QgbmFtZSwgcGxlYXNlIGRlZmluZSB0aGUgYHByb2plY3ROYW1lYCBpbiBgc3JjL3NlcnZlci9zaGFyZWQvY29uZmlnYCcpO1xuXG5jb25zdCBwcm9qZWN0Q29uZmlnUGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAncHJvamVjdHMnLCBwcm9qZWN0TmFtZSwgJ2NvbmZpZy5qcycpO1xuXG50cnkge1xuICAgIHByb2plY3RDb25maWcgPSByZXF1aXJlKHByb2plY3RDb25maWdQYXRoKTtcbn0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgcHJvamVjdCBjb25maWcgZmlsZSBcIiR7cHJvamVjdENvbmZpZ1BhdGh9XCJgKTtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG4vLyBjb25maWd1cmUgZXhwcmVzcyBlbnZpcm9ubWVudCAoJ3Byb2R1Y3Rpb24nIGVuYWJsZXMgY2FjaGUgc3lzdGVtcylcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gY29uZmlnLmVudjtcbi8vIGluaXRpYWxpemUgYXBwbGljYXRpb24gd2l0aCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbnNvdW5kd29ya3Muc2VydmVyLmluaXQoY29uZmlnKTtcblxuXG5wcm9qZWN0Q29uZmlnLm5hbWUgPSBwcm9qZWN0TmFtZTtcbi8vIG9wZW4gc3RhdGljIG1pZGRsZXdhcmUgZm9yIGFzc2V0c1xuY29uc3QgcHJvamVjdENvbmZpZ0pzb24gPSBKU09OLnN0cmluZ2lmeShwcm9qZWN0Q29uZmlnKTtcbmNvbnN0IHByb2plY3RBc3NldHMgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3Byb2plY3RzJywgcHJvamVjdE5hbWUsICdhc3NldHMnKTtcblxuc291bmR3b3Jrcy5zZXJ2ZXIucm91dGVyLnVzZSgnL2Fzc2V0cycsIHNlcnZlU3RhdGljKHByb2plY3RBc3NldHMpKTtcbnNvdW5kd29ya3Muc2VydmVyLnJvdXRlci5nZXQoJy9wcm9qZWN0LWNvbmZpZycsIChyZXEsIHJlcykgPT4gcmVzLmpzb24ocHJvamVjdENvbmZpZ0pzb24pKTtcblxuLy8gZGVmaW5lIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB0byBiZSBwYXNzZWQgdG8gdGhlIGAuZWpzYCB0ZW1wbGF0ZVxuc291bmR3b3Jrcy5zZXJ2ZXIuc2V0Q2xpZW50Q29uZmlnRGVmaW5pdGlvbigoY2xpZW50VHlwZSwgY29uZmlnLCBodHRwUmVxdWVzdCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNsaWVudFR5cGU6IGNsaWVudFR5cGUsXG4gICAgICAgIGVudjogY29uZmlnLmVudixcbiAgICAgICAgYXBwTmFtZTogY29uZmlnLmFwcE5hbWUsXG4gICAgICAgIHdlYnNvY2tldHM6IGNvbmZpZy53ZWJzb2NrZXRzLFxuICAgICAgICB2ZXJzaW9uOiBjb25maWcudmVyc2lvbixcbiAgICAgICAgZGVmYXVsdFR5cGU6IGNvbmZpZy5kZWZhdWx0Q2xpZW50LFxuICAgICAgICBhc3NldHNEb21haW46IGNvbmZpZy5hc3NldHNEb21haW4sXG4gICAgfTtcbn0pO1xuXG4vLyBwYXJzZSBhbGwgc3RhdGVzIHRvIGNyZWF0ZSBjb250cm9sbGVyc1xuY29uc3Qgc2hhcmVkUGFyYW1zID0gc291bmR3b3Jrcy5zZXJ2ZXIucmVxdWlyZSgnc2hhcmVkLXBhcmFtcycpO1xuXG5zaGFyZWRQYXJhbXMuYWRkQm9vbGVhbignZGVidWctbW9kZScsICdEZWJ1ZyBtb2RlJywgZmFsc2UpO1xuXG5wcm9qZWN0Q29uZmlnLnN0YXRlcy5mb3JFYWNoKHN0YXRlID0+IHtcbiAgICBjb25zdCBuYW1lID0gc2x1Z2lmeShzdGF0ZS50aXRsZSk7XG4gICAgY29uc3QgbGFiZWwgPSBzdGF0ZS50aXRsZTtcbiAgICBjb25zdCBvcHRpb25zID0gc3RhdGUuZXZlbnRzLm1hcCgoZXZlbnQsIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiBgWyR7aW5kZXh9XSAtICR7ZXZlbnQudHlwZX0gKCR7ZXZlbnQudGltZX1zKWA7XG4gICAgfSk7XG5cbiAgICBzaGFyZWRQYXJhbXMuYWRkRW51bShuYW1lLCBsYWJlbCwgb3B0aW9ucyk7XG59KTtcblxuLy8gbGF1bmNoIGV4cGVyaWVuY2VzXG5jb25zdCBleHBlcmllbmNlID0gbmV3IFBsYXllckV4cGVyaWVuY2UoJ3BsYXllcicsIHByb2plY3RDb25maWcsIHByb2plY3ROYW1lKTtcblxuaWYgKGNvbmZpZy5lbnYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgc291bmR3b3Jrcy5Db250cm9sbGVyRXhwZXJpZW5jZSgnY29udHJvbGxlcicpO1xufVxuXG4vLyBzdGFydCBhcHBsaWNhdGlvblxuc291bmR3b3Jrcy5zZXJ2ZXIuc3RhcnQoKTsiXX0=