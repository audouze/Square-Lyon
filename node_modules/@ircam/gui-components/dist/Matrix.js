'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseComponent2 = require('./BaseComponent');

var _BaseComponent3 = _interopRequireDefault(_BaseComponent2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ns = 'http://www.w3.org/2000/svg';

var Matrix = function (_BaseComponent) {
  _inherits(Matrix, _BaseComponent);

  function Matrix(options) {
    _classCallCheck(this, Matrix);

    var _this = _possibleConstructorReturn(this, (Matrix.__proto__ || Object.getPrototypeOf(Matrix)).call(this));

    var defaults = {
      callback: function callback() {},
      container: 'body',
      numCols: 4,
      numRows: 4,
      width: 400,
      height: 400
      // trigger: 'touch', // 'aftertouch'
    };

    _this.params = Object.assign({}, defaults, options);

    _this._$svg = null;
    _this._$cells = null;

    _this._onMouseDown = _this._onMouseDown.bind(_this);
    _this._onMouseMove = _this._onMouseMove.bind(_this);
    _this._onMouseUp = _this._onMouseUp.bind(_this);

    _this._createValue();
    _this._createElement();
    _this._render();
    return _this;
  }

  _createClass(Matrix, [{
    key: 'setValues',


    // set values(values) {
    //   this._values = values;

    //   this.params.callback(this._values);
    //   this._render();
    // }

    value: function setValues(values) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$silent = _ref.silent,
          silent = _ref$silent === undefined ? false : _ref$silent;

      this._values = values;

      if (silent === false) {
        this.params.callback(this._values);
      }

      this._render();
    }
  }, {
    key: 'setCellValue',
    value: function setCellValue(x, y, value) {
      var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
          _ref2$silent = _ref2.silent,
          silent = _ref2$silent === undefined ? false : _ref2$silent;

      this._values[x][y] = value;
      // dispatch value

      if (silent === false) {
        this.params.callback(this._values);
      }

      this._render();
    }
  }, {
    key: 'toggleCell',
    value: function toggleCell(x, y) {
      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref3$silent = _ref3.silent,
          silent = _ref3$silent === undefined ? false : _ref3$silent;

      var value = this._values[x][y];
      this.setCellValue(x, y, 1 - value);
    }
  }, {
    key: 'setParameter',
    value: function setParameter(name, value) {
      // ...
      if (this.params[name]) this.params[name] = value;
    }
  }, {
    key: 'reset',
    value: function reset() {
      var _params = this.params,
          numCols = _params.numCols,
          numRows = _params.numRows;


      for (var x = 0; x < numCols; x++) {
        for (var y = 0; y < numRows; y++) {
          this._values[x][y] = 0;
        }
      }

      this.params.callback(this._values);
      this._render();
    }
  }, {
    key: 'resize',
    value: function resize() {
      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (width !== null) {
        this.params.width = width;
      }

      if (height !== null) {
        this.params.height = height;
      }

      this._resizeElement();
    }
  }, {
    key: '_createValue',
    value: function _createValue() {
      var _params2 = this.params,
          numCols = _params2.numCols,
          numRows = _params2.numRows;


      this._values = [];
      // define if row first or colFirst
      for (var x = 0; x < numCols; x++) {
        var col = [];

        for (var y = 0; y < numRows; y++) {
          col[y] = 0;
        }

        this._values[x] = col;
      }
    }
  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(e) {
      this._$svg.addEventListener('mousemove', this._onMouseMove);
      window.addEventListener('mouseup', this._onMouseUp);

      var $cell = e.target;
      var _$cell$dataset = $cell.dataset,
          x = _$cell$dataset.x,
          y = _$cell$dataset.y;


      this.toggleCell(x, y);
      this._$lastCell = $cell;
    }
  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(e) {
      var $cell = e.target;

      if (this._$lastCell !== $cell) {
        var _$cell$dataset2 = $cell.dataset,
            x = _$cell$dataset2.x,
            y = _$cell$dataset2.y;


        this.toggleCell(x, y);
        this._$lastCell = $cell;
      }
    }
  }, {
    key: '_onMouseUp',
    value: function _onMouseUp() {
      this._$svg.removeEventListener('mousemove', this._onMouseMove);
      window.removeEventListener('mouseup', this._onMouseUp);
    }
  }, {
    key: '_createElement',
    value: function _createElement() {
      var _params3 = this.params,
          container = _params3.container,
          numCols = _params3.numCols,
          numRows = _params3.numRows;

      this._$svg = document.createElementNS(ns, 'svg');
      this._$svg.setAttributeNS(null, 'shape-rendering', 'optimizeSpeed');
      this._$svg.setAttribute('xmlns:xhtml', 'http://www.w3.org/1999/xhtml');

      this._$cells = [];

      for (var x = 0; x < numCols; x++) {
        var $coll = [];

        for (var y = 0; y < numRows; y++) {
          var $cell = document.createElementNS(ns, 'rect');
          // $cell.style.stroke = '#787878';
          $cell.setAttributeNS(null, 'stroke', '#787878');
          $cell.dataset.x = x;
          $cell.dataset.y = y;

          $coll[y] = $cell;
          this._$svg.appendChild($cell);
        }

        this._$cells[x] = $coll;
      }

      this._resizeElement();

      var $container = void 0;
      if (container instanceof Element) {
        $container = container;
      } else {
        $container = document.querySelector(container);
      }

      $container.appendChild(this._$svg);

      this._$svg.addEventListener('mousedown', this._onMouseDown);
    }
  }, {
    key: '_resizeElement',
    value: function _resizeElement() {
      var _params4 = this.params,
          numCols = _params4.numCols,
          numRows = _params4.numRows,
          width = _params4.width,
          height = _params4.height;


      this._$svg.style.width = width + 'px';
      this._$svg.style.height = height + 'px';

      var cellWidth = width / numCols;
      var cellHeight = height / numRows;

      for (var x = 0; x < numCols; x++) {
        for (var y = 0; y < numRows; y++) {
          var $cell = this._$cells[x][y];
          $cell.setAttribute('width', cellWidth);
          $cell.setAttribute('height', cellHeight);
          $cell.setAttribute('x', cellWidth * x);
          $cell.setAttribute('y', cellHeight * y);
        }
      }
    }
  }, {
    key: '_render',
    value: function _render() {
      var _params5 = this.params,
          numCols = _params5.numCols,
          numRows = _params5.numRows;


      for (var x = 0; x < numCols; x++) {
        for (var y = 0; y < numRows; y++) {
          var $cell = this._$cells[x][y];
          var value = this._values[x][y];

          if (value > 0) {
            $cell.setAttributeNS(null, 'fill', '#ffffff');
            $cell.setAttributeNS(null, 'fill-opacity', value);
          } else {
            $cell.setAttributeNS(null, 'fill', '#000000');
            $cell.setAttributeNS(null, 'fill-opacity', 1);
          }
        }
      }
    }
  }, {
    key: 'values',
    get: function get() {
      return this._values;
    }
  }]);

  return Matrix;
}(_BaseComponent3.default);

exports.default = Matrix;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,